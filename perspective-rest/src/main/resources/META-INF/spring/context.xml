<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xmlns:amq="http://activemq.apache.org/schema/core" xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.hazelcast.com/schema/spring
            http://www.hazelcast.com/schema/spring/hazelcast-spring-3.1.xsd
            http://camel.apache.org/schema/spring
            http://camel.apache.org/schema/spring/camel-spring.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://activemq.apache.org/schema/core
            http://activemq.apache.org/schema/core/activemq-core.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="org.meridor.perspective"/>
    <aop:aspectj-autoproxy/>
    
    <!-- Properties -->
    <bean id="configurationProperties"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:perspective.properties</value>
            </list>
        </property>
    </bean>

    <!-- Scheduler -->
    <task:annotation-driven scheduler="perspectiveScheduler"/>
    <task:scheduler id="perspectiveScheduler" pool-size="10"/>
    
    <!-- Embedded ActiveMQ -->
    <amq:broker useJmx="false" persistent="false">
        <amq:transportConnectors>
            <amq:transportConnector uri="tcp://localhost:61619"/>
        </amq:transportConnectors>
    </amq:broker>
    
    <!-- ActiveMQ connection pooler -->
    <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://localhost:61619)?randomize=false&amp;maxReconnectAttempts=5"/>
    </bean>
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
           init-method="start" destroy-method="stop"> <!-- depends-on="perspectiveContext" -->
        <property name="maxConnections" value="8"/>
        <property name="maximumActiveSessionPerConnection" value="500"/>
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
    </bean>
    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
        <property name="transacted" value="false"/>
        <property name="testConnectionOnStartup" value="true"/>
        <property name="receiveTimeout" value="10"/>
    </bean>
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsConfig"/>
        <property name="testConnectionOnStartup" value="true"/>
    </bean>

    <!-- Embedded Hazelcast -->
    <hz:hazelcast id="hazelcastInstance">
        <hz:config>
            <hz:group name="${perspective.hazelcast.group.name}" password="${perspective.hazelcast.group.password}"/>
            <hz:properties>
                <hz:property name="hazelcast.merge.first.run.delay.seconds">5</hz:property>
                <hz:property name="hazelcast.merge.next.run.delay.seconds">5</hz:property>
            </hz:properties>
            <hz:network port="5801" port-auto-increment="true">
                <hz:join>
                    <hz:multicast enabled="false" multicast-group="224.2.2.3" multicast-port="54327"/>
                    <hz:tcp-ip enabled="true">
                        <hz:members>127.0.0.1</hz:members>
                    </hz:tcp-ip>
                </hz:join>
                <hz:interfaces>
                    <hz:interface>127.0.0.1</hz:interface>
                </hz:interfaces>
            </hz:network>

            <hz:map name="default"
                    backup-count="1"
                    max-size="0"
                    eviction-percentage="30"
                    read-backup-data="true"
                    eviction-policy="NONE"
                    merge-policy="hz.ADD_NEW_ENTRY"/>
        </hz:config>
    </hz:hazelcast>

    <bean id="hazelcastClient" class="com.hazelcast.client.HazelcastClient" factory-method="newHazelcastClient">
        <constructor-arg>
            <bean class="com.hazelcast.client.config.ClientConfig">
                <property name="groupConfig">
                    <bean class="com.hazelcast.config.GroupConfig">
                        <property name="name" value="${perspective.hazelcast.group.name}"/>
                        <property name="password" value="${perspective.hazelcast.group.password}"/>
                    </bean>
                </property>
                <property name="networkConfig">
                    <bean class="com.hazelcast.client.config.ClientNetworkConfig">
                        <property name="addresses">
                            <list>
                                <value>127.0.0.1:5801</value>
                            </list>
                        </property>
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <!-- Camel context -->
    <camelContext id="perspectiveContext" xmlns="http://camel.apache.org/schema/spring" allowUseOriginalMessage="false" streamCache="true">
        <jmxAgent id="agent" disabled="true"/>
        <threadPoolProfile id="camelThreadPool" defaultProfile="true" maxPoolSize="64"/>
        <endpoint id="projects" uri="activemq:queue:projects?concurrentConsumers=${perspective.parallel.consumers}"/>
        <endpoint id="instances" uri="activemq:queue:instances?concurrentConsumers=${perspective.parallel.consumers}"/>
        
        <route id="listProjects">
            <from uri="ref:projects"/>
            <bean ref="projectsFetcher"/>
        </route>

        <route id="listInstances">
            <from uri="ref:instances"/>
            <bean ref="instancesFetcher"/>
        </route>

        <route id="updateInstances">
            <from uri="ref:instances"/>
            <filter>
                <method ref="instancesFilter" method="isInstanceDeletingEvent"/>
                <bean ref="instancesUpdater" method="deleteInstances"/>
            </filter>
        </route>

    </camelContext>
</beans>